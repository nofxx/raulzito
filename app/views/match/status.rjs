# status.rjs - this template emits JS to update the board in-place, as well as to increment
# the move number the page is polling. While the same URL could have been used, embedding 
# the move number in the URL requested by the client allows the page to be handled more 
# statelessly, adds a layer of tracability, and does not leak state into cookies or session
# variables, allowing for future tracking of multiple matches at once.

if status_has_changed
  page << "next_move_url = '#{url_for( :action => :status, :move => match.moves.length + 1 ) }';"

  page.replace_html 'move_list', :partial => 'match/move_list'
  page.replace_html 'move_indicator_parent', :partial => 'match/move_indicator'
  page.replace_html 'board_parent', :partial => 'match/board'
  page << "$('move_notation').clear();"

  page['move_submit_btn'].disabled = ! your_turn

  page.visual_effect(
    :highlight, 
    last_move.to_coord, 
    :startcolor => (last_move.notation.include?('x') ? 'ff0000' : '00ff00'), 
    :duration => 10
  )


  page << "all_boards[#{match.moves.count}] = #{match.board.to_json}"
  page << "current_allowed_moves = [];"

  match.board.each do |pos, piece|
    page << "current_allowed_moves['#{pos}'] = \"#{piece.allowed_moves(match.board).join(' ')}\""
  end

  # The first few chars of the title bar may be visible if window is minimized, so update
  # them to indicate its your turnx
  page << "document.title = 'Your move: ' + document.title.replace(/^.*move:/, '')" 

end